module Door_Lock_system (
    input clk,
    input rst,
    input key_valid,         // High when a key is entered
    input [3:0] key_in,      // 4-bit keypad input (0-9)
    output reg unlock,       // Goes high when unlocked
    output reg error         // Goes high on incorrect input
);

    // State Encoding
    parameter S_IDLE     = 3'd0;
    parameter S_CHECK_1  = 3'd1;
    parameter S_CHECK_2  = 3'd2;
    parameter S_CHECK_3  = 3'd3;
    parameter S_UNLOCKED = 3'd4;
    parameter S_ERROR    = 3'd5;

    reg [2:0] current_state, next_state;

    // Passcode = 1-2-3-4
    parameter [3:0] CODE_0 = 4'd5;
    parameter [3:0] CODE_1 = 4'd2;
    parameter [3:0] CODE_2 = 4'd6;
    parameter [3:0] CODE_3 = 4'd8;

    // Sequential state transition
    always @(posedge clk or posedge rst) begin
        if (rst)
            current_state <= S_IDLE;
        else
            current_state <= next_state;
    end

    // Combinational next state logic and outputs
    always @(*) begin
        // Default values
        unlock = 0;
        error = 0;
        next_state = current_state;

        case (current_state)
            S_IDLE: begin
                if (key_valid) begin
                    if (key_in == CODE_0)
                        next_state = S_CHECK_1;
                    else
                        next_state = S_ERROR;
                end
            end

            S_CHECK_1: begin
                if (key_valid) begin
                    if (key_in == CODE_1)
                        next_state = S_CHECK_2;
                    else
                        next_state = S_ERROR;
                end
            end

            S_CHECK_2: begin
                if (key_valid) begin
                    if (key_in == CODE_2)
                        next_state = S_CHECK_3;
                    else
                        next_state = S_ERROR;
                end
            end

            S_CHECK_3: begin
                if (key_valid) begin
                    if (key_in == CODE_3)
                        next_state = S_UNLOCKED;
                    else
                        next_state = S_ERROR;
                end
            end

            S_UNLOCKED: begin
                unlock = 1;
                next_state = S_IDLE;  // Auto-reset
            end

            S_ERROR: begin
                error = 1;
                next_state = S_IDLE;  // Auto-reset
            end

            default: next_state = S_IDLE;
        endcase
    end

endmodule
